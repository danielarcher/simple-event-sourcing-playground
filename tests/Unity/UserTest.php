<?php

namespace Acme\Tests\Unity;

use Acme\Application\CreateUserCommand;
use Acme\Domain\Event\UserCreated;
use Acme\Domain\User;
use Acme\Domain\UserId;
use Acme\Domain\UserName;
use Acme\Infrastructure\InMemoryRepository;
use DI\Container;
use DI\ContainerBuilder;
use PHPUnit\Framework\TestCase;
use Ramsey\Uuid\Uuid;
use Shared\EventStorage;
use Shared\Repository;
use Shared\SimpleCommandBus;

class UserTest extends TestCase
{
    /**
     * @var Container
     */
    private $container;

    /**
     * @var Repository
     */
    private $repository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $builder = new ContainerBuilder();
        $this->container = $builder->build();

        $this->repository = new InMemoryRepository();

        $this->container->set(EventStorage::class, function() {
            return new EventStorage($this->repository);
        });
    }

    /**
     * @test
     */
    public function new_user()
    {
        $user = new User(
            new UserId(Uuid::uuid4()),
            new UserName('Foo')
        );
        $this->assertEquals('Foo', $user->name());
    }

    /**
     * @test
     */
    public function store_new_user()
    {
        $cb = new SimpleCommandBus($this->container);
        $newUserCommand = new CreateUserCommand('Bar');
        $cb->handle($newUserCommand);

        $storedEvent = unserialize($this->repository->get(0));
        $this->assertInstanceOf(UserCreated::class, $storedEvent);
    }

    /**
     * @test
     */
    public function store_two_new_users()
    {
        $cb = new SimpleCommandBus($this->container);
        $newUserCommand = new CreateUserCommand('Foo');
        $cb->handle($newUserCommand);

        $newUserCommand = new CreateUserCommand('Foz');
        $cb->handle($newUserCommand);

        $storedEvent = unserialize($this->repository->get(0));
        $this->assertInstanceOf(UserCreated::class, $storedEvent);

        $storedEvent = unserialize($this->repository->get(1));
        $this->assertInstanceOf(UserCreated::class, $storedEvent);
    }
}